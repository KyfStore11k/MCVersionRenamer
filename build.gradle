plugins {
	id 'fabric-loom' version '1.10-SNAPSHOT'
	id 'maven-publish'
	id 'checkstyle'
}

def generatedVersionDir = layout.buildDirectory.dir("generated-version")

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.

	maven {
		name = "CottonMC"
		url = "https://server.bbkr.space/artifactory/libs-release"
	}

	maven {
		name = "Terraformers"
		url = "https://maven.terraformersmc.com/"
	}

	maven { url 'https://maven.wispforest.io/releases/' }

	flatDir {
		dirs 'libs'
	}
}

fabricApi {
	configureDataGeneration {
		client = true
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"

	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modImplementation include("io.github.cottonmc:LibGui:12.0.1+1.21.2")

	modCompileOnly files("libs/BetterF3-13.0.0-Fabric-1.21.4.jar")

	modImplementation "io.wispforest:owo-lib:${project.owo_version}"
	include "io.wispforest:owo-sentinel:${project.owo_version}"
	annotationProcessor modImplementation("io.wispforest:owo-lib:${project.owo_version}")

	// https://mvnrepository.com/artifact/com.squareup.okhttp3/okhttp
	implementation include("com.squareup.okhttp3:okhttp:5.0.0-alpha.14")
	// https://mvnrepository.com/artifact/com.squareup.okio/okio
	implementation include("com.squareup.okio:okio:3.10.2")
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

tasks.register('generateVersionProperties') {
	doLast {
		def propertiesFile = generatedVersionDir.get().file("version.properties").asFile
		propertiesFile.parentFile.mkdirs()

		def properties = new Properties()
		properties.setProperty("version", project.version.toString())

		// Use FileWriter to write to the file
		propertiesFile.withWriter { writer ->
			properties.store(writer, null)
		}
	}
}

tasks.named("processResources") {
	dependsOn generateVersionProperties
}

java {
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

sourceSets {
	main {
		resources.srcDir(generatedVersionDir)
	}
}

jar {
	inputs.property "archivesName", project.base.archivesName

	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}